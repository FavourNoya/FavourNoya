# CHAPTER 16 EXECUTABLES --------------------------------------------------------------
library(tidyverse)

x1 <- c("Dec", "Apr", "Jan", "Mar")
month_levels <- c(
  "Jan", "Feb", "Mar", "Apr", "May", "Jun",
  "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"
)

y1 <- factor(x1, levels = month_levels)
y1
#> [1] Dec Apr Jan Mar
#> Levels: Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec

sort(y1)
#> [1] Jan Mar Apr Dec
#> Levels: Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec

factor(x1)
#> [1] Dec Apr Jan Mar
#> Levels: Apr Dec Jan Mar

fct(x1)
#> [1] Dec Apr Jan Mar
#> Levels: Dec Apr Jan Mar

csv <- "
month,value
Jan,12
Feb,56
Mar,12"

df <- read_csv(csv, col_types = cols(month = col_factor(month_levels)))
df$month
#> [1] Jan Feb Mar
#> Levels: Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec

# 16.3
gss_cat
#> # A tibble: 21,483 × 9
#>    year marital         age race  rincome        partyid           
#>   <int> <fct>         <int> <fct> <fct>          <fct>             
#> 1  2000 Never married    26 White $8000 to 9999  Ind,near rep      
#> 2  2000 Divorced         48 White $8000 to 9999  Not str republican
#> 3  2000 Widowed          67 White Not applicable Independent       
#> 4  2000 Never married    39 White Not applicable Ind,near rep      
#> 5  2000 Divorced         25 White Not applicable Not str democrat  
#> 6  2000 Married          25 White $20000 - 24999 Strong democrat   
#> # ℹ 21,477 more rows
#> # ℹ 3 more variables: relig <fct>, denom <fct>, tvhours <int>

gss_cat |>
  count(race)
#> # A tibble: 3 × 2
#>   race      n
#>   <fct> <int>
#> 1 Other  1959
#> 2 Black  3129
#> 3 White 16395

# 16.4
relig_summary <- gss_cat |>
  group_by(relig) |>
  summarize(
    tvhours = mean(tvhours, na.rm = TRUE),
    n = n()
  )

ggplot(relig_summary, aes(x = tvhours, y = relig)) +
  geom_point()

ggplot(relig_summary, aes(x = tvhours, y = fct_reorder(relig, tvhours))) +
  geom_point()

relig_summary |>
  mutate(
    relig = fct_reorder(relig, tvhours)
  ) |>
  ggplot(aes(x = tvhours, y = relig)) +
  geom_point()

rincome_summary <- gss_cat |>
  group_by(rincome) |>
  summarize(
    age = mean(age, na.rm = TRUE),
    n = n()
  )

ggplot(rincome_summary, aes(x = age, y = fct_reorder(rincome, age))) +
  geom_point()

ggplot(rincome_summary, aes(x = age, y = fct_relevel(rincome, "Not applicable"))) +
  geom_point()

by_age <- gss_cat |>
  filter(!is.na(age)) |>
  count(age, marital) |>
  group_by(age) |>
  mutate(
    prop = n / sum(n)
  )

ggplot(by_age, aes(x = age, y = prop, color = marital)) +
  geom_line(linewidth = 1) +
  scale_color_brewer(palette = "Set1")

ggplot(by_age, aes(x = age, y = prop, color = fct_reorder2(marital, age, prop))) +
  geom_line(linewidth = 1) +
  scale_color_brewer(palette = "Set1") +
  labs(color = "marital")

gss_cat |>
  mutate(marital = marital |> fct_infreq() |> fct_rev()) |>
  ggplot(aes(x = marital)) +
  geom_bar()

# 16.5
gss_cat |> count(partyid)
#> # A tibble: 10 × 2
#>   partyid                n
#>   <fct>              <int>
#> 1 No answer            154
#> 2 Don't know             1
#> 3 Other party          393
#> 4 Strong republican   2314
#> 5 Not str republican  3032
#> 6 Ind,near rep        1791
#> # ℹ 4 more rows

gss_cat |>
  mutate(
    partyid = fct_recode(partyid,
                         "Republican, strong"    = "Strong republican",
                         "Republican, weak"      = "Not str republican",
                         "Independent, near rep" = "Ind,near rep",
                         "Independent, near dem" = "Ind,near dem",
                         "Democrat, weak"        = "Not str democrat",
                         "Democrat, strong"      = "Strong democrat"
    )
  ) |>
  count(partyid)
#> # A tibble: 10 × 2
#>   partyid                   n
#>   <fct>                 <int>
#> 1 No answer               154
#> 2 Don't know                1
#> 3 Other party             393
#> 4 Republican, strong     2314
#> 5 Republican, weak       3032
#> 6 Independent, near rep  1791
#> # ℹ 4 more rows

gss_cat |>
  mutate(
    partyid = fct_recode(partyid,
                         "Republican, strong"    = "Strong republican",
                         "Republican, weak"      = "Not str republican",
                         "Independent, near rep" = "Ind,near rep",
                         "Independent, near dem" = "Ind,near dem",
                         "Democrat, weak"        = "Not str democrat",
                         "Democrat, strong"      = "Strong democrat",
                         "Other"                 = "No answer",
                         "Other"                 = "Don't know",
                         "Other"                 = "Other party"
    )
  )

gss_cat |>
  mutate(
    partyid = fct_collapse(partyid,
                           "other" = c("No answer", "Don't know", "Other party"),
                           "rep" = c("Strong republican", "Not str republican"),
                           "ind" = c("Ind,near rep", "Independent", "Ind,near dem"),
                           "dem" = c("Not str democrat", "Strong democrat")
    )
  ) |>
  count(partyid)
#> # A tibble: 4 × 2
#>   partyid     n
#>   <fct>   <int>
#> 1 other     548
#> 2 rep      5346
#> 3 ind      8409
#> 4 dem      7180

gss_cat |>
  mutate(relig = fct_lump_lowfreq(relig)) |>
  count(relig)
#> # A tibble: 2 × 2
#>   relig          n
#>   <fct>      <int>
#> 1 Protestant 10846
#> 2 Other      10637

gss_cat |>
  mutate(relig = fct_lump_n(relig, n = 10)) |>
  count(relig, sort = TRUE)
#> # A tibble: 10 × 2
#>   relig          n
#>   <fct>      <int>
#> 1 Protestant 10846
#> 2 Catholic    5124
#> 3 None        3523
#> 4 Christian    689
#> 5 Other        458
#> 6 Jewish       388
#> # ℹ 4 more rows

# 16.6
ordered(c("a", "b", "c"))
#> [1] a b c
#> Levels: a < b < c


# CHAPTER 17 EXECUTABLES --------------------------------------------------
library(tidyverse)
library(nycflights13)

today()
#> [1] "2025-04-14"
now()
#> [1] "2025-04-14 23:09:06 UTC"

csv <- "
  date,datetime
  2022-01-02,2022-01-02 05:12
"
read_csv(csv)
#> # A tibble: 1 × 2
#>   date       datetime           
#>   <date>     <dttm>             
#> 1 2022-01-02 2022-01-02 05:12:00

csv <- "
  date
  01/02/15
"

read_csv(csv, col_types = cols(date = col_date("%m/%d/%y")))
#> # A tibble: 1 × 1
#>   date      
#>   <date>    
#> 1 2015-01-02

read_csv(csv, col_types = cols(date = col_date("%d/%m/%y")))
#> # A tibble: 1 × 1
#>   date      
#>   <date>    
#> 1 2015-02-01

read_csv(csv, col_types = cols(date = col_date("%y/%m/%d")))
#> # A tibble: 1 × 1
#>   date      
#>   <date>    
#> 1 2001-02-15

ymd("2017-01-31")
#> [1] "2017-01-31"
mdy("January 31st, 2017")
#> [1] "2017-01-31"
dmy("31-Jan-2017")
#> [1] "2017-01-31"

ymd_hms("2017-01-31 20:11:59")
#> [1] "2017-01-31 20:11:59 UTC"
mdy_hm("01/31/2017 08:01")
#> [1] "2017-01-31 08:01:00 UTC"

ymd("2017-01-31", tz = "UTC")
#> [1] "2017-01-31 UTC"

flights |> 
  select(year, month, day, hour, minute)
#> # A tibble: 336,776 × 5
#>    year month   day  hour minute
#>   <int> <int> <int> <dbl>  <dbl>
#> 1  2013     1     1     5     15
#> 2  2013     1     1     5     29
#> 3  2013     1     1     5     40
#> 4  2013     1     1     5     45
#> 5  2013     1     1     6      0
#> 6  2013     1     1     5     58
#> # ℹ 336,770 more rows

flights |> 
  select(year, month, day, hour, minute) |> 
  mutate(departure = make_datetime(year, month, day, hour, minute))
#> # A tibble: 336,776 × 6
#>    year month   day  hour minute departure          
#>   <int> <int> <int> <dbl>  <dbl> <dttm>             
#> 1  2013     1     1     5     15 2013-01-01 05:15:00
#> 2  2013     1     1     5     29 2013-01-01 05:29:00
#> 3  2013     1     1     5     40 2013-01-01 05:40:00
#> 4  2013     1     1     5     45 2013-01-01 05:45:00
#> 5  2013     1     1     6      0 2013-01-01 06:00:00
#> 6  2013     1     1     5     58 2013-01-01 05:58:00
#> # ℹ 336,770 more rows

make_datetime_100 <- function(year, month, day, time) {
  make_datetime(year, month, day, time %/% 100, time %% 100)
}

flights_dt <- flights |> 
  filter(!is.na(dep_time), !is.na(arr_time)) |> 
  mutate(
    dep_time = make_datetime_100(year, month, day, dep_time),
    arr_time = make_datetime_100(year, month, day, arr_time),
    sched_dep_time = make_datetime_100(year, month, day, sched_dep_time),
    sched_arr_time = make_datetime_100(year, month, day, sched_arr_time)
  ) |> 
  select(origin, dest, ends_with("delay"), ends_with("time"))

flights_dt
#> # A tibble: 328,063 × 9
#>   origin dest  dep_delay arr_delay dep_time            sched_dep_time     
#>   <chr>  <chr>     <dbl>     <dbl> <dttm>              <dttm>             
#> 1 EWR    IAH           2        11 2013-01-01 05:17:00 2013-01-01 05:15:00
#> 2 LGA    IAH           4        20 2013-01-01 05:33:00 2013-01-01 05:29:00
#> 3 JFK    MIA           2        33 2013-01-01 05:42:00 2013-01-01 05:40:00
#> 4 JFK    BQN          -1       -18 2013-01-01 05:44:00 2013-01-01 05:45:00
#> 5 LGA    ATL          -6       -25 2013-01-01 05:54:00 2013-01-01 06:00:00
#> 6 EWR    ORD          -4        12 2013-01-01 05:54:00 2013-01-01 05:58:00
#> # ℹ 328,057 more rows
#> # ℹ 3 more variables: arr_time <dttm>, sched_arr_time <dttm>, …

flights_dt |> 
  ggplot(aes(x = dep_time)) + 
  geom_freqpoly(binwidth = 86400) # 86400 seconds = 1 day

flights_dt |> 
  filter(dep_time < ymd(20130102)) |> 
  ggplot(aes(x = dep_time)) + 
  geom_freqpoly(binwidth = 600) # 600 s = 10 minutes

as_datetime(today())
#> [1] "2025-04-14 UTC"
as_date(now())
#> [1] "2025-04-14"

as_datetime(60 * 60 * 10)
#> [1] "1970-01-01 10:00:00 UTC"
as_date(365 * 10 + 2)
#> [1] "1980-01-01"

# 17.3
datetime <- ymd_hms("2026-07-08 12:34:56")

year(datetime)
#> [1] 2026
month(datetime)
#> [1] 7
mday(datetime)
#> [1] 8

yday(datetime)
#> [1] 189
wday(datetime)
#> [1] 4

month(datetime, label = TRUE)
#> [1] Jul
#> 12 Levels: Jan < Feb < Mar < Apr < May < Jun < Jul < Aug < Sep < ... < Dec
wday(datetime, label = TRUE, abbr = FALSE)
#> [1] Wednesday
#> 7 Levels: Sunday < Monday < Tuesday < Wednesday < Thursday < ... < Saturday

flights_dt |> 
  mutate(wday = wday(dep_time, label = TRUE)) |> 
  ggplot(aes(x = wday)) +
  geom_bar()

flights_dt |> 
  mutate(minute = minute(dep_time)) |> 
  group_by(minute) |> 
  summarize(
    avg_delay = mean(dep_delay, na.rm = TRUE),
    n = n()
  ) |> 
  ggplot(aes(x = minute, y = avg_delay)) +
  geom_line()

sched_dep <- flights_dt |> 
  mutate(minute = minute(sched_dep_time)) |> 
  group_by(minute) |> 
  summarize(
    avg_delay = mean(arr_delay, na.rm = TRUE),
    n = n()
  )

ggplot(sched_dep, aes(x = minute, y = avg_delay)) +
  geom_line()

flights_dt |> 
  count(week = floor_date(dep_time, "week")) |> 
  ggplot(aes(x = week, y = n)) +
  geom_line() + 
  geom_point()

flights_dt |> 
  mutate(dep_hour = dep_time - floor_date(dep_time, "day")) |> 
  ggplot(aes(x = dep_hour)) +
  geom_freqpoly(binwidth = 60 * 30)
#> Don't know how to automatically pick scale for object of type <difftime>.
#> Defaulting to continuous.

flights_dt |> 
  mutate(dep_hour = hms::as_hms(dep_time - floor_date(dep_time, "day"))) |> 
  ggplot(aes(x = dep_hour)) +
  geom_freqpoly(binwidth = 60 * 30)

(datetime <- ymd_hms("2026-07-08 12:34:56"))
#> [1] "2026-07-08 12:34:56 UTC"

year(datetime) <- 2030
datetime
#> [1] "2030-07-08 12:34:56 UTC"
month(datetime) <- 01
datetime
#> [1] "2030-01-08 12:34:56 UTC"
hour(datetime) <- hour(datetime) + 1
datetime
#> [1] "2030-01-08 13:34:56 UTC"

update(datetime, year = 2030, month = 2, mday = 2, hour = 2)
#> [1] "2030-02-02 02:34:56 UTC"

update(ymd("2023-02-01"), mday = 30)
#> [1] "2023-03-02"
update(ymd("2023-02-01"), hour = 400)
#> [1] "2023-02-17 16:00:00 UTC"

# 17.4 - Time Spans
# How old is Hadley?
h_age <- today() - ymd("1979-10-14")
h_age
#> Time difference of 16619 days

as.duration(h_age)
#> [1] "1435881600s (~45.5 years)"

dseconds(15)
#> [1] "15s"
dminutes(10)
#> [1] "600s (~10 minutes)"
dhours(c(12, 24))
#> [1] "43200s (~12 hours)" "86400s (~1 days)"
ddays(0:5)
#> [1] "0s"                "86400s (~1 days)"  "172800s (~2 days)"
#> [4] "259200s (~3 days)" "345600s (~4 days)" "432000s (~5 days)"
dweeks(3)
#> [1] "1814400s (~3 weeks)"
dyears(1)
#> [1] "31557600s (~1 years)"

2 * dyears(1)
#> [1] "63115200s (~2 years)"
dyears(1) + dweeks(12) + dhours(15)
#> [1] "38869200s (~1.23 years)"

tomorrow <- today() + ddays(1)
last_year <- today() - dyears(1)

one_am <- ymd_hms("2026-03-08 01:00:00", tz = "America/New_York")

one_am
#> [1] "2026-03-08 01:00:00 EST"
one_am + ddays(1)
#> [1] "2026-03-09 02:00:00 EDT"

one_am
#> [1] "2026-03-08 01:00:00 EST"
one_am + days(1)
#> [1] "2026-03-09 01:00:00 EDT"

hours(c(12, 24))
#> [1] "12H 0M 0S" "24H 0M 0S"
days(7)
#> [1] "7d 0H 0M 0S"
months(1:6)
#> [1] "1m 0d 0H 0M 0S" "2m 0d 0H 0M 0S" "3m 0d 0H 0M 0S" "4m 0d 0H 0M 0S"
#> [5] "5m 0d 0H 0M 0S" "6m 0d 0H 0M 0S"

10 * (months(6) + days(1))
#> [1] "60m 10d 0H 0M 0S"
days(50) + hours(25) + minutes(2)
#> [1] "50d 25H 2M 0S"

# A leap year
ymd("2024-01-01") + dyears(1)
#> [1] "2024-12-31 06:00:00 UTC"
ymd("2024-01-01") + years(1)
#> [1] "2025-01-01"

# Daylight saving time
one_am + ddays(1)
#> [1] "2026-03-09 02:00:00 EDT"
one_am + days(1)
#> [1] "2026-03-09 01:00:00 EDT"

flights_dt |> 
  filter(arr_time < dep_time) 
#> # A tibble: 10,633 × 9
#>   origin dest  dep_delay arr_delay dep_time            sched_dep_time     
#>   <chr>  <chr>     <dbl>     <dbl> <dttm>              <dttm>             
#> 1 EWR    BQN           9        -4 2013-01-01 19:29:00 2013-01-01 19:20:00
#> 2 JFK    DFW          59        NA 2013-01-01 19:39:00 2013-01-01 18:40:00
#> 3 EWR    TPA          -2         9 2013-01-01 20:58:00 2013-01-01 21:00:00
#> 4 EWR    SJU          -6       -12 2013-01-01 21:02:00 2013-01-01 21:08:00
#> 5 EWR    SFO          11       -14 2013-01-01 21:08:00 2013-01-01 20:57:00
#> 6 LGA    FLL         -10        -2 2013-01-01 21:20:00 2013-01-01 21:30:00
#> # ℹ 10,627 more rows
#> # ℹ 3 more variables: arr_time <dttm>, sched_arr_time <dttm>, …

flights_dt <- flights_dt |> 
  mutate(
    overnight = arr_time < dep_time,
    arr_time = arr_time + days(overnight),
    sched_arr_time = sched_arr_time + days(overnight)
  )

flights_dt |> 
  filter(arr_time < dep_time) 
#> # A tibble: 0 × 10
#> # ℹ 10 variables: origin <chr>, dest <chr>, dep_delay <dbl>,
#> #   arr_delay <dbl>, dep_time <dttm>, sched_dep_time <dttm>, …

years(1) / days(1)
#> [1] 365.25

y2023 <- ymd("2023-01-01") %--% ymd("2024-01-01")
y2024 <- ymd("2024-01-01") %--% ymd("2025-01-01")

y2023
#> [1] 2023-01-01 UTC--2024-01-01 UTC
y2024
#> [1] 2024-01-01 UTC--2025-01-01 UTC

y2023 / days(1)
#> [1] 365
y2024 / days(1)
#> [1] 366

# 17.5
Sys.timezone()
#> [1] "UTC"

length(OlsonNames())
#> [1] 598
head(OlsonNames())
#> [1] "Africa/Abidjan"     "Africa/Accra"       "Africa/Addis_Ababa"
#> [4] "Africa/Algiers"     "Africa/Asmara"      "Africa/Asmera"

x1 <- ymd_hms("2024-06-01 12:00:00", tz = "America/New_York")
x1
#> [1] "2024-06-01 12:00:00 EDT"

x2 <- ymd_hms("2024-06-01 18:00:00", tz = "Europe/Copenhagen")
x2
#> [1] "2024-06-01 18:00:00 CEST"

x3 <- ymd_hms("2024-06-02 04:00:00", tz = "Pacific/Auckland")
x3
#> [1] "2024-06-02 04:00:00 NZST"

x1 - x2
#> Time difference of 0 secs
x1 - x3
#> Time difference of 0 secs

x4 <- c(x1, x2, x3)
x4
#> [1] "2024-06-01 12:00:00 EDT" "2024-06-01 12:00:00 EDT"
#> [3] "2024-06-01 12:00:00 EDT"

x4a <- with_tz(x4, tzone = "Australia/Lord_Howe")
x4a
#> [1] "2024-06-02 02:30:00 +1030" "2024-06-02 02:30:00 +1030"
#> [3] "2024-06-02 02:30:00 +1030"
x4a - x4
#> Time differences in secs
#> [1] 0 0 0

x4b <- force_tz(x4, tzone = "Australia/Lord_Howe")
x4b
#> [1] "2024-06-01 12:00:00 +1030" "2024-06-01 12:00:00 +1030"
#> [3] "2024-06-01 12:00:00 +1030"
x4b - x4
#> Time differences in hours
#> [1] -14.5 -14.5 -14.5


# CHAPTER 16 EXERCISES ----------------------------------------------------

# 16.3.1	
# 1 - the default bar chart that is lacking clearer readability
ggplot(gss_cat, aes(x = rincome)) +
  geom_bar() +
  coord_flip()
# 1 - improvements from reordering frequency
gss_cat %>%
  mutate(rincome = fct_infreq(rincome)) %>%
  ggplot(aes(x = rincome)) +
  geom_bar() +
  coord_flip() +
  labs(title = "Distribution of Reported Income", x = "Reported Income", y = "Count")

# 2 - most common religion
gss_cat %>%
  count(relig, sort = TRUE)
# 2 - most common party id
gss_cat %>%
  count(partyid, sort = TRUE)

# 3 - via a table
table(gss_cat$relig, gss_cat$denom)
# 3 - via visualization
gss_cat %>%
  filter(!is.na(denom)) %>%
  count(relig, denom) %>%
  ggplot(aes(x = denom, fill = relig)) +
  geom_bar(position = "fill") +
  coord_flip() +
  labs(title = "Which Religion Does Denomination Apply To?",
       y = "Proportion", x = "Denomination")

# 16.4.1
# 1
summary(gss_cat$tvhours)
ggplot(gss_cat, aes(x = tvhours)) +
  geom_histogram(binwidth = 1, fill = "#5dade2") +
  labs(title = "Distribution of Hours Watching TV", x = "TV Hours", y = "Count")

# 2
levels(gss_cat$marital)
levels(gss_cat$rincome)
levels(gss_cat$partyid)
levels(gss_cat$relig)
levels(gss_cat$denom)
levels(gss_cat$tvhours)  # This is the only quantitative factor

# 3
gss_cat %>%
  mutate(rincome = fct_relevel(rincome, "Not applicable")) %>%
  ggplot(aes(x = rincome)) +
  geom_bar() +
  coord_flip() +
  labs(title = "Relevelled rincome with 'Not applicable' first")

# 16.5.1
# 1
gss_cat %>%
  mutate(party_group = fct_collapse(partyid,
                                    "Democrat" = c("Strong democrat", "Not str democrat"),
                                    "Republican" = c("Strong republican", "Not str republican"),
                                    "Independent" = c("Ind,near dem", "Independent", "Ind,near rep")
  )) %>%
  filter(!is.na(party_group)) %>%
  count(year, party_group) %>%
  group_by(year) %>%
  mutate(prop = n / sum(n)) %>%
  ggplot(aes(x = year, y = prop, color = party_group)) +
  geom_line(size = 1.2) +
  labs(title = "Party Identification Over Time",
       y = "Proportion", x = "Year", color = "Party") +
  scale_y_continuous(labels = scales::percent_format()) +
  theme_minimal()

# 2
gss_cat %>%
  mutate(income_group = fct_collapse(rincome,
                                     "No income" = c("No income", "Not applicable"),
                                     "<$10k" = c("Lt $1000", "$1000 to 2999", "$3000 to 3999", "$4000 to 4999", "$5000 to 5999", "$6000 to 6999", "$7000 to 7999", "$8000 to 9999"),
                                     "$10k–$25k" = c("$10000 - 14999", "$15000 - 19999", "$20000 - 24999"),
                                     ">$25k" = c("$25000 or more"),
                                     "Don't know/Refused" = c("Refused", "Don't know")
  )) %>%
  count(income_group) %>%
  ggplot(aes(x = income_group, y = n, fill = income_group)) +
  geom_col(show.legend = FALSE) +
  labs(title = "Collapsed Income Categories", x = "Income Group", y = "Count") +
  coord_flip()

# 3
?fct_lump


# CHAPTER 17 EXERCISES ----------------------------------------------------

# 17.2.5
# 1
ymd(c("2010-10-10", "bananas"))
#> [1] "2010-10-10" NA  

# 2
today(tzone = "Asia/Tokyo")
#> [1] "2025-04-15"

# 3
read_csv("date\nJanuary 1, 2010", col_types = cols(date = col_date(format = "%B %d, %Y")))
mdy("January 1, 2010")

read_csv("date\n2015-Mar-07", col_types = cols(date = col_date(format = "%Y-%b-%d")))
ymd("2015-Mar-07")

read_csv("date\n06-Jun-2017", col_types = cols(date = col_date(format = "%d-%b-%Y")))
dmy("06-Jun-2017")

d4 <- c("August 19 (2015)", "July 1 (2015)")
mdy(str_remove_all(d4, "[()]"))

read_csv("date\n12/30/14", col_types = cols(date = col_date(format = "%m/%d/%y")))
mdy("12/30/14")

parse_time <- function(t) {
  hour <- as.integer(substr(t, 1, 2))
  minute <- as.integer(substr(t, 3, 4))
  hms::hms(hours = hour, minutes = minute)
}
parse_time("1705")

parse_date_time("11:15:10.12 PM", orders = "I:M:S.p")

# 17.3.4
# 1
library(nycflights13)
library(tidyverse)
library(lubridate)
flights_clean <- flights %>%
  mutate(
    dep_time_min = (dep_time %/% 100) * 60 + (dep_time %% 100),
    month = factor(month)
  )
ggplot(flights_clean, aes(x = dep_time_min, color = month)) +
  geom_freqpoly(binwidth = 60) +
  scale_x_continuous(name = "Departure time (minutes since midnight)", breaks = seq(0, 1440, 120)) +
  labs(title = "Distribution of departure times by month", y = "Number of Flights")

# 2
flights %>%
  mutate(
    actual_min = (dep_time %/% 100) * 60 + (dep_time %% 100),
    sched_min = (sched_dep_time %/% 100) * 60 + (sched_dep_time %% 100),
    delay_diff = actual_min - sched_min
  ) %>%
  filter(!is.na(dep_delay)) %>%
  summarise(correlation = cor(dep_delay, delay_diff, use = "complete.obs"))

# 3
flights %>%
  mutate(
    sched_dep = (sched_dep_time %/% 100) * 60 + (sched_dep_time %% 100),
    sched_arr = (sched_arr_time %/% 100) * 60 + (sched_arr_time %% 100),
    sched_duration = sched_arr - sched_dep
  ) %>%
  filter(!is.na(sched_duration), !is.na(air_time)) %>%
  ggplot(aes(x = sched_duration, y = air_time)) +
  geom_point(alpha = 0.3) +
  geom_abline(slope = 1, intercept = 0, color = "red") +
  labs(title = "Air time vs. Scheduled Duration", x = "Scheduled Duration (min)", y = "Air Time (min)")

# 4
flights %>%
  mutate(
    sched_hour = sched_dep_time %/% 100
  ) %>%
  group_by(sched_hour) %>%
  summarise(avg_dep_delay = mean(dep_delay, na.rm = TRUE)) %>%
  ggplot(aes(x = sched_hour, y = avg_dep_delay)) +
  geom_line() +
  labs(title = "Average Departure Delay by Hour of Scheduled Departure",
       x = "Scheduled Hour of Day", y = "Average Delay (min)")

# 5
flights %>%
  mutate(weekday = wday(time_hour, label = TRUE)) %>%
  group_by(weekday) %>%
  summarise(avg_delay = mean(dep_delay, na.rm = TRUE)) %>%
  ggplot(aes(x = weekday, y = avg_delay)) +
  geom_col() +
  labs(title = "Average Departure Delay by Day of the Week", y = "Average Delay (min)")

# 6
ggplot(flights, aes(x = sched_dep_time)) + 
  geom_histogram(binwidth = 10) + 
  labs(title = "Distribution of Scheduled Departure Time")
ggplot(diamonds, aes(x = carat)) +
  geom_histogram(binwidth = 0.01) +
  labs(title = "Distribution of Diamond Carats")

# 7
flights %>%
  mutate(
    sched_dep_min = (sched_dep_time %/% 100) * 60 + (sched_dep_time %% 100),
    dep_min = (dep_time %/% 100) * 60 + (dep_time %% 100),
    early = dep_delay < 0
  ) %>%
  filter(!is.na(early)) %>%
  ggplot(aes(x = dep_min %% 60, fill = early)) +
  geom_histogram(binwidth = 1, position = "identity", alpha = 0.6) +
  scale_x_continuous(name = "Minutes after the hour") +
  labs(title = "Early Departures by Minute Within Hour")

# 17.4.4
# 1
overnight <- c(TRUE, FALSE, TRUE)
days(overnight)   # 1d, 0d, 1d
days(!overnight)  # 0d, 1d, 0d

# 2 - in 2015
first_2015 <- ymd("2015-01-01") + months(0:11)
first_2015
# 2 - current year
first_2025 <- ymd(paste0(year(today()), "-01-01")) + months(0:11)
first_2025

# 3
age_in_years <- function(birthday) {
  floor(interval(birthday, today()) / years(1))
}
age_in_years(ymd("2003-11-13"))

# 4, but better 
as.period(today() %--% (today() + years(1)))
